#+TITLE: Build a todo app in React and Lens
#+OPTIONS: reveal_title_slide:"<h1>%t</h1>"
#+OPTIONS: reveal_rolling_links:t reveal_overview:t
#+OPTIONS: num:nil toc:nil
#+REVEAL_THEME: black

* Todo app

[[./images/app.png]]

** Goals
- Learn how to build component-based React apps by building a fairly full featured todo app.
- Apply Looker's Lens library to provide a nice consistent styling (Bonus points if you *only* use Lens components)
- Learn about some basic state management techniques by applying the Redux pattern.

** Features
1. List active todos.
2. Complete todos by clicking on them (or using a checkbox). Remove todo from active list when completed.
3. List completed todos when user wants to. Show the date when the todo was completed.
4. Remove todos that you are mistakes and/or want cleared from list.

[[http://lens-todo.s3-website-us-west-2.amazonaws.com/][Reference implementation]]

* Miscellenanous stuff
** Structure
This top level directory has a few directories.  The directory `start_here` includes a skeleton project
where you will begin your work. There is a README in that subdirectory that will give you instructions on how
to get get going

This top level directory also includes a few reference implementations of the todo app that you can use if you get
stuck. I do provide a disclaimer that I wrote thenm fairly quickly and do not guarantee they will be production
quality. I have tried to document my code as much as possible for educational purposes.  If you find any glaring errors,
please let me know!

** Helpful references
Here a few helpful references for you as you build out your todo app.

1. [[https://reactjs.org/][ReactJS]] - Probably the best starting point for learning how to build React apps
2. [[https://lens.looker.com/][Lens Docs]] - Catalogues and documents all Lens components you can use your in your app
3. [[https://redux.js.org/][Redux]] - One of many state management tools you might choose to make your app more predictable and robust.  I have provided a reference app using Redux if you are interested.
4. [[https://www.youtube.com/watch?v=34_L7t7fD_U][Simple made easy]] - Not directly related to this project,  but you should strive to make your components and app simple. Learn about what that means here.

** Helpful Chrome extensions
The community has developed a number of very helpful Chrome developer extensions to help you with React development.  Here are some:

[[https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en][1. React developer tools]] - Provides a new tab in your Chrome dev tools that shows you a component tree of your app,
allows you to inspect and change passed in props, and a number of other things

[[./images/react-dev-tools.png]]

If you get a chance to try and implement a Redux-based state tree,  then:

[[https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en][2. Redux dev tools]] -  Provides a new tab to watch, inspect, and change actions in your Redux state tree.

[[./images/redux-dev-tools.png]]

* Ready to begin?
[[./start_here/README.org][Click here]]
