* So much to do,  so little time

[[../images/app.png]]

* App goals

A todo is a simple data structure that includes what needs to be done, whether it is completed, and if completed, when it was completed.
Here is a basic interface (defined in `src/utils/todo_utils)

#+BEGIN_SRC javascript

interface Todo {
  id: number,
  what: string,
  completed: boolean,
  on?: Date
}

#+END_SRC

Your app should allow users to manage a series of these todo items.

Your app should support the following features:
1. List active todos.
2. Complete todos by clicking on them (or using a checkbox). Remove todo from active list when completed.
3. Be able to see completed todos. Show the date when the todo was completed.
4. Remove todos that are mistakes and/or you want cleared from list.

There are a lot of ways to build this in React, but you should strongly consider figuring out to break this into simple components with well
defined interfaces that can be composed together.  We will talk about this as part of the initial talk before starting.

* Todo 1: Setting up skeleton project

** Install Yarn
[[https://yarnpkg.com/en/][Yarn]] must be installed.  If you don't have yarn installed , have a look [[https://yarnpkg.com/en/docs/install][here]] and choose the appropriate installation for your environment.

** Configure gradle.properties file
Lens needs to connect to Looker's private npm registry, powered by Nexus. Lens has some scripts that take care of this setup automatically,
but they assume that some setup from Helltool has already been completed, specifically configuration of a gradle.properties file.

If you have Helltool installed and running, you've likely already setup your gradle.properties file to connect to our Nexus server.
[[https://github.com/looker/helltool#dependencies][If not take a look at the relevant Helltool directions and follow them so you can get the Nexus server username and password first]].


** Clone this Repository and setup
#+BEGIN_SRC bash
git clone git@github.com:ssirowy/lens-todo.git
cd lens-todo/start_here/
yarn npmrc
yarn
yarn start
#+END_SRC

[[http://localhost:3000/][Open this and you should see a basic app.]]

If all goes well you should see something that looks like this:

[[../images/first.png]]

* Todo 2: Get your bearings and have a look around
I used a very helpful tool called [[https://github.com/facebook/create-react-app][Create React app]] to set up the basic React app skeleton for me and I chose to use Typescript.  The tool
sets up a simple directory structure all of our code will go under the `src` directory.  Have a look in there.  I have provided some sample code
you can start looking at and modifying.

*** Main source files
**** src/index.tsx
   This was generated for me and instantiates our app. You likely wont have to touch this, but you can see how your app is created.
**** src/components/LensTodo.tsx
   This file was initially generated and I have changed it to illustrate some really basic usage of how to render a component and basic Lens component usage.
   This is our main app level component.
**** src/components/LensTodo.css
   I tried to keep my CSS usage down to a mininum to see what Lens provides out of the box, but in certain cases I needed a little more flexibility.
   Try and make use of Lens default stylings as much as you can as you build.
**** src/utils/todo_utils.ts
   I have provided a number of todo utilities you might find useful, including helpful interfaces of a Todo item, an interface for our app state, and
   a variety of other items.
**** src/utils/todo_items.ts
   Here is the data to initially drive the todo list. It just so happens to be potential ordering for how to go about building your app.

*** React apps
There are much [[https://reactjs.org/][better treatments]] of what React is and how to build, render, and compose components together, but here some basics.

React is a small library that makes it easy to build UI components. For those familiar with the MVC architecture,
React acts as the (V)iew layer. React provides a few simple approaches for defining how your component
should be rendered.  Here are a couple ways to build a simple greeting component that renders someone's name

#+BEGIN_SRC javascript

/**
  * Pure functional based approach. Useful when building components that are only the product
  * of their input
  */
const Greeting = ({ name }) =>
  <h1>Greetings {name} </h1>

/**
  * Class based approach. Useful when you may need to maintain internal state
  */
class Greeting extends React.Component {
  render() {
    return (
       <h1>Greetings {this.props.name}</h1>
    )
  }
}


// Here is how the component might be instantiated...
<Greeting name="Scott" />

#+END_SRC

(There are several other valid approaches I won't get into detail in here for)

Components can accept inputs from the outside world, called _props_. They can also maintain their own internal _state_.  Components are typically
built to have simple, well defined interfaces, and be inherently composable within an app hierarchy.

You will see in the LensTodo.tsx that the app is itself a component that is composed of several Lens components.


1. Look at the Lens docs and instantiate a few more components inside the Card. Try different inputs to see what they do.
2. The LensTodo app is wrapped inside a `ThemeProvider` component which has a reference to a theme.
   The theme itself has several defined palettes.  Try and change the background of the page by applying a `bg` prop to the top most `Flex` component in the component.

* Todo 3: List todos

To get started,  notice that the app already has a list of todo items.

#+BEGIN_SRC javascript

// Initial state of app. This can come from anything (e.g local storage, a server call, etc)
// but for simplicity we will simply set here every time we start app.
this.state = {

  // Show completed todos or not
  showCompleted: false,

  // List of todo objects.
  todos: todoItems.map(todoFromStr),
}

#+END_SRC


1. In the app's render method, try and output the first todo item's text. Try the second.
2. Can you figure out how to output all of them?
3. Once you've figured that out, start considering how you can build a component that accepts an array of todos and lists all of them.
   This will come in handy when we show both active and completed todo items in separate lists.
4. Use your new component in top level app and pass all todos to it to be rendered.

#+BEGIN_SRC javascript
/** TodoList.tsx */

// Sugested todo list interface
interface TodoListProps {
  todos: Todos,
}

// Implements a component with defined props and no state
export class TodoList extends React.Component<TodoListProps, {}> {
  render() {
    return (
       // I suggest looking into Lens's components to help you compose this.
    )
  }
}

#+END_SRC

#+BEGIN_SRC javascript
/** TodoElement.tsx */

// Suggested todo element interface
interface TodoElementProps {
  todo: Todo,
}

export class TodoElement extends React.Component<TodoElementProps, {}> {
  render() {
    return (
       // I suggest looking into Lens' ListItem components to help you compose this.
    )
  }
}

#+END_SRC

Once you are done,  you should see all of your todo items in a nice list:

[[../images/list-of-todos.png]]

* Todo 4: Create new todos
Support the ability to add new todos to the list.  (Up to you if you feel the news todos should go to the bottom or top of list)

#+BEGIN_SRC javascript

// Add this to your app level component
public addTodo = (what: string) => {
  // Add a new todo item to the state object in here.  Use the `todoFromStr` helper to build a quick todo object.
}
#+END_SRC

1.  Implement above method in app component.
2.  Create a new `AddTodo` component that composes an input and button. Below is a sample stub for you to start with

#+BEGIN_SRC javascript

/** AddTodo.tsx */

// Defined in src/utils/todo_utils.ts
export type AddTodoCallback = (todo: string) => void

// Component interface.
interface AddTodoProps {
  addTodo: AddTodoCallback
}

interface AddTodoState {
  input: string
}

export class AddTodo extends React.Component<AddTodoProps, AddTodoState> { ... }

#+END_SRC

3. Notice you will likely have to implement some basic state in this component to track what the input has.
4. Instantiate AddTodo component to app and wire to add method from step 1.
5. Make sure when you add one the new element gets rendered in todo list.


Here is what it might look look when using Lens components and connected in.

[[../images/add-todos.png]]

* Todo 5: Complete todos
Support the ability to complete todos.  This effectively means asserting the `completed` value on any given todo.

#+BEGIN_SRC javascript

// Add this to to your LensTodo.tsx component.
public updateTodo = (id: number, completed: boolean, on?: Date) => {
  ...
  // this.setState(someNewStateOfTheWorld)
}
#+END_SRC

1. Implement a handler in your top level todo app that accepts a todo ID, a complete state, and optionally when it was completed.
2. Pass this method into your todo list (and any other needed subcomponents)
3. In your todo list items, add a Lens checkbox to the left of the todo text that when checked,
   will call up to toggle its completeness. If the todo item is completed, also pass a new Date object
   up to log when it was complete.
4. For a completed item,
   - Add the date next the item in the todo list element.
   - For a completed todo, cross out the item.  Here is some CSS to use:

#+BEGIN_SRC css

.completed {
  text-decoration: line-through;
}

#+END_SRC

Here is a completed todo item.  I used Moment to show a relative date, but you certainly don't have to do that:

[[../images/completed-todo.png]]

* Todo 6: Filter todos
Separate full list of todos into two distinct lists, one set of active todos and one set of completed todos.

1. Add a button below todo list that when clicked, toggles the `showCompleted` state value.
2. Show appropriate text on the button dependent on the state. (e.g. Show/Hide)
3. Filter the todos so the first todo list only shows non completed todos
4. Add a second todo list below the button that only renders when `showCompleted` is true.
5. Pass in the completed todos to this second list.
6. If everything is wired up correctly, you should be able toggle todos and see them move betweent the lists.


Here is what it might look like after showing filtered todos:

[[../images/different-lists.png]]

* Todo 7: State management

So far we've been managing our state in the app level component, distributing aspects of that state through
various properties (props) on subcomponents,  and then passing callbacks up to augment the state.

For a small app, this may be a perfectly suitable way to do things (and maybe even recommended)

But what happens as:
-  our app gets bigger and more complex?
-  our app  has larger and larger sub component trees that we need to pass properties up and down?
-  our app needs to make async calls to save our lists?  Who makes those calls?

You can imagine that the approach we've taken so far may get unwieldy, and makes it
hard to reason about various interconnected behaviors, actions, etc.

Managing app state in a sane way is a hard problem, although plenty of patterns and solutions exist.
Choosing one should take into account a variety of factors.

One such pattern is the [[https://redux.js.org/][Redux]] pattern. Redux comes from a family of state mangement patterns (it is inspired by Flux)
that help developers create and maintain a predictable state container for their app.

The basic idea is that any part of the application can dispatch "actions" to indirectly manipulate a global app state.
Those actions are then use to "compute" the next app state using pure functional techniques.

I'm not going to write any more about Redux here because they provide a much better treatment on their website.

And, it just so happens that the Redux tutorial targets a simple todo app, should be relatively
straightforward to follow, and then subsequently augment your app to use.  It might be argued that such a simple
app doesnt need something as "heavy" as Redux,  but for learning purposes I think its a great way to learn about
the basic patterns.

1. Go through the [[https://redux.js.org/basics][Redux tutorial]] and refactor your app to use the Redux state management pattern.
